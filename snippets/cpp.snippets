# For OceanBase
snippet tbe
	TBSYS_LOG(ERROR, "${1:error_msg}"${2:);}
snippet tbw
	TBSYS_LOG(WARN, "${1:warn_msg}"${2:);}
snippet tbi
	TBSYS_LOG(INFO, "${1:info}"${2:);}
snippet tbd
	TBSYS_LOG(DEBUG, "${1:debug_msg}"${2:);}
snippet loge
	TBSYS_LOG(ERROR, "${1:error_msg}"${2:);}
snippet logw
	TBSYS_LOG(WARN, "${1:warn_msg}"${2:);}
snippet logi
	TBSYS_LOG(INFO, "${1:info}"${2:);}
snippet logd
	TBSYS_LOG(DEBUG, "${1:debug_msg}"${2:);}
snippet tblog
	TBSYS_LOG(${1:WARN}
snippet ret
	int ret = OB_SUCCESS;
	${1}
	return ret;
snippet if
	if (OB_SUCCESS != (ret = ${1:function}($2))) {
	  $2
	}
snippet ifw
	if (OB_SUCCESS != (ret = ${1:function}(${2:}))) {
	  TBSYS_LOG(WARN, "${3:WARN_MSG} ret=%ret", ret);
	}

snippet for
	for (${1:i} = 0; OB_SUCCESS == ret && $1 < ${2:count}; $1${3:++}) {
		${4:/* code */}
	}

# Namespace
snippet ns
	namespace ${1:`Filename('', 'my')`}
	{
		${2}
	} /* $1 */
snippet using
	using namespace ${1:oceanbase}

snippet get_row_desc
	int ${1:XXXOperator}::get_next_row(const common::ObRowDesc &row_desc)
	{
		${2}
	}
snippet get_next_row
	int ${1:XXXOperator}::get_next_row(const common::ObRow &*row)
	{
		${2}
	}
snippet open
	int ${1:XXXOperator}::open()
	{
		${2}
	}
snippet close
	int ${1:XXXOperator}::close()
	{
		${2}
	}
snippet serialize
	int ${1:TypeName}::serialize(char* buf, const int64_t buf_len, int64_t& pos) const
	{
	}
snippet deserialize
	int ${1:TypeName}::deserialize(const char* buf, const int64_t data_len, int64_t& pos)
	{
	}
snippet get_serialize_size
	int64_t ${1:TypeName}::get_serialize_size(void) const
	{
		int64_t size = 0;
		${2}
		return size;
	}

snippet class_h
	#ifndef ${4:__XXX_H__}
	#define $4
	namespace oceanbase
	{
	namespace ${1:ns}
	{
	class ${2:class_name}
	{
	public:
		$2();
		${3:virtual} ~$2();
	private:
		/* functions */
		/* variables */
		DISALLOW_COPY_AND_ASSIGN($2);
	};
	}
	}
	#endif /* $4 */
snippet class_cpp

	#include "`Filename()`.h"
	using namespace oceanbase::common;
	namespace oceanbase
	{
	namespace $1
	{

	$2::$2()
	{
	}

	$2::~$2()
	{
	}

	}/* ns $1*/
	}/* ns oceanbase */



snippet class
	#ifndef ${4:__XXX_H__}
	#define $4
	namespace oceanbase
	{
	namespace ${1:ns}
	{
	class ${2:class_name}
	{
	public:
		$2();
		${3:virtual} ~$2();
	private:
		/* functions */
		/* variables */
		DISALLOW_COPY_AND_ASSIGN($2);
	};
	}
	}
	#endif /* $4 */
	//// end of header file

	#include "`Filename()`.h"

	using namespace oceanbase::common;
	namespace oceanbase
	{
	namespace $1
	{

	$2::$2()
	{
	}

	$2::~$2()
	{
	}

	}/* ns $1*/
	}/* ns oceanbase */

snippet gtest
	#include <gtest/gtest.h>
	using namespace oceanbase::common;

	class ${1:XXX}Test : public ::testing::Test
	{
	public:
		$1Test();
		virtual ~$1Test();
		virtual void SetUp();
		virtual void TearDown();
	private:
		// disallow copy
		$1Test(const $1Test &other);
		$1Test& operator=(const $1Test &other);
	private:
		// data members
	};
	$1Test::$1Test()
	{
	}

	$1Test::~$1Test()
	{
	}

	void $1Test::SetUp()
	{
	}

	void $1Test::TearDown()
	{
	}

	TEST_F($1Test, basic_test)
	{
		${2:/* put your testing code here */}
	}

	int main(int argc, char **argv)
	{
		ob_init_memory_pool();
		TBSYS_LOGGER.setLogLevel("INFO");
	  ::testing::InitGoogleTest(&argc,argv);
		return RUN_ALL_TESTS();
	}

